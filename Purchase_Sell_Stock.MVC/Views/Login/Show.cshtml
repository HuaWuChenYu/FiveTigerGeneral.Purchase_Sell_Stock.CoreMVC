
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script src="~/layui/layui.js"></script>
    <link href="~/layui/css/layui.css" rel="stylesheet" />
    <script src="~/layui/layui.js"></script>
    <link href="~/layui/css/layui.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <title>账号登陆</title>
    <meta charset="utf-8">
    <title>js粒子旋涡</title>

    <style>
        html, body {
            margin: 0px;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background: #000;
        }

        #canvas {
            position: absolute;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>

    <canvas id="canvas"></canvas>

    <script>
        function project3D(x, y, z, vars) {

            var p, d;
            x -= vars.camX;
            y -= vars.camY - 8;
            z -= vars.camZ;
            p = Math.atan2(x, z);
            d = Math.sqrt(x * x + z * z);
            x = Math.sin(p - vars.yaw) * d;
            z = Math.cos(p - vars.yaw) * d;
            p = Math.atan2(y, z);
            d = Math.sqrt(y * y + z * z);
            y = Math.sin(p - vars.pitch) * d;
            z = Math.cos(p - vars.pitch) * d;
            var rx1 = -1000;
            var ry1 = 1;
            var rx2 = 1000;
            var ry2 = 1;
            var rx3 = 0;
            var ry3 = 0;
            var rx4 = x;
            var ry4 = z;
            var uc = (ry4 - ry3) * (rx2 - rx1) - (rx4 - rx3) * (ry2 - ry1);
            var ua = ((rx4 - rx3) * (ry1 - ry3) - (ry4 - ry3) * (rx1 - rx3)) / uc;
            var ub = ((rx2 - rx1) * (ry1 - ry3) - (ry2 - ry1) * (rx1 - rx3)) / uc;
            if (!z) z = 0.000000001;
            if (ua > 0 && ua < 1 && ub > 0 && ub < 1) {
                return {
                    x: vars.cx + (rx1 + ua * (rx2 - rx1)) * vars.scale,
                    y: vars.cy + y / z * vars.scale,
                    d: (x * x + y * y + z * z)
                };
            } else {
                return { d: -1 };
            }
        }


        function elevation(x, y, z) {

            var dist = Math.sqrt(x * x + y * y + z * z);
            if (dist && z / dist >= -1 && z / dist <= 1) return Math.acos(z / dist);
            return 0.00000001;
        }


        function rgb(col) {

            col += 0.000001;
            var r = parseInt((0.5 + Math.sin(col) * 0.5) * 16);
            var g = parseInt((0.5 + Math.cos(col) * 0.5) * 16);
            var b = parseInt((0.5 - Math.sin(col) * 0.5) * 16);
            return "#" + r.toString(16) + g.toString(16) + b.toString(16);
        }


        function interpolateColors(RGB1, RGB2, degree) {

            var w2 = degree;
            var w1 = 1 - w2;
            return [w1 * RGB1[0] + w2 * RGB2[0], w1 * RGB1[1] + w2 * RGB2[1], w1 * RGB1[2] + w2 * RGB2[2]];
        }


        function rgbArray(col) {

            col += 0.000001;
            var r = parseInt((0.5 + Math.sin(col) * 0.5) * 256);
            var g = parseInt((0.5 + Math.cos(col) * 0.5) * 256);
            var b = parseInt((0.5 - Math.sin(col) * 0.5) * 256);
            return [r, g, b];
        }


        function colorString(arr) {

            var r = parseInt(arr[0]);
            var g = parseInt(arr[1]);
            var b = parseInt(arr[2]);
            return "#" + ("0" + r.toString(16)).slice(-2) + ("0" + g.toString(16)).slice(-2) + ("0" + b.toString(16)).slice(-2);
        }


        function process(vars) {


            if (vars.points.length < vars.initParticles) for (var i = 0; i < 5; ++i) spawnParticle(vars);
            var p, d, t;

            p = Math.atan2(vars.camX, vars.camZ);
            d = Math.sqrt(vars.camX * vars.camX + vars.camZ * vars.camZ);
            d -= Math.sin(vars.frameNo / 80) / 25;
            t = Math.cos(vars.frameNo / 300) / 165;
            vars.camX = Math.sin(p + t) * d;
            vars.camZ = Math.cos(p + t) * d;
            vars.camY = -Math.sin(vars.frameNo / 220) * 15;
            vars.yaw = Math.PI + p + t;
            vars.pitch = elevation(vars.camX, vars.camZ, vars.camY) - Math.PI / 2;

            var t;
            for (var i = 0; i < vars.points.length; ++i) {

                x = vars.points[i].x;
                y = vars.points[i].y;
                z = vars.points[i].z;
                d = Math.sqrt(x * x + z * z) / 1.0075;
                t = .1 / (1 + d * d / 5);
                p = Math.atan2(x, z) + t;
                vars.points[i].x = Math.sin(p) * d;
                vars.points[i].z = Math.cos(p) * d;
                vars.points[i].y += vars.points[i].vy * t * ((Math.sqrt(vars.distributionRadius) - d) * 2);
                if (vars.points[i].y > vars.vortexHeight / 2 || d < .25) {
                    vars.points.splice(i, 1);
                    spawnParticle(vars);
                }
            }
        }

        function drawFloor(vars) {

            var x, y, z, d, point, a;
            for (var i = -25; i <= 25; i += 1) {
                for (var j = -25; j <= 25; j += 1) {
                    x = i * 2;
                    z = j * 2;
                    y = vars.floor;
                    d = Math.sqrt(x * x + z * z);
                    point = project3D(x, y - d * d / 85, z, vars);
                    if (point.d != -1) {
                        size = 1 + 15000 / (1 + point.d);
                        a = 0.15 - Math.pow(d / 50, 4) * 0.15;
                        if (a > 0) {
                            vars.ctx.fillStyle = colorString(interpolateColors(rgbArray(d / 26 - vars.frameNo / 40), [0, 128, 32], .5 + Math.sin(d / 6 - vars.frameNo / 8) / 2));
                            vars.ctx.globalAlpha = a;
                            vars.ctx.fillRect(point.x - size / 2, point.y - size / 2, size, size);
                        }
                    }
                }
            }
            vars.ctx.fillStyle = "#82f";
            for (var i = -25; i <= 25; i += 1) {
                for (var j = -25; j <= 25; j += 1) {
                    x = i * 2;
                    z = j * 2;
                    y = -vars.floor;
                    d = Math.sqrt(x * x + z * z);
                    point = project3D(x, y + d * d / 85, z, vars);
                    if (point.d != -1) {
                        size = 1 + 15000 / (1 + point.d);
                        a = 0.15 - Math.pow(d / 50, 4) * 0.15;
                        if (a > 0) {
                            vars.ctx.fillStyle = colorString(interpolateColors(rgbArray(-d / 26 - vars.frameNo / 40), [32, 0, 128], .5 + Math.sin(-d / 6 - vars.frameNo / 8) / 2));
                            vars.ctx.globalAlpha = a;
                            vars.ctx.fillRect(point.x - size / 2, point.y - size / 2, size, size);
                        }
                    }
                }
            }
        }

        function sortFunction(a, b) {
            return b.dist - a.dist;
        }

        function draw(vars) {

            vars.ctx.globalAlpha = .15;
            vars.ctx.fillStyle = "#000";
            vars.ctx.fillRect(0, 0, canvas.width, canvas.height);

            drawFloor(vars);

            var point, x, y, z, a;
            for (var i = 0; i < vars.points.length; ++i) {
                x = vars.points[i].x;
                y = vars.points[i].y;
                z = vars.points[i].z;
                point = project3D(x, y, z, vars);
                if (point.d != -1) {
                    vars.points[i].dist = point.d;
                    size = 1 + vars.points[i].radius / (1 + point.d);
                    d = Math.abs(vars.points[i].y);
                    a = .8 - Math.pow(d / (vars.vortexHeight / 2), 1000) * .8;
                    vars.ctx.globalAlpha = a >= 0 && a <= 1 ? a : 0;
                    vars.ctx.fillStyle = rgb(vars.points[i].color);
                    if (point.x > -1 && point.x < vars.canvas.width && point.y > -1 && point.y < vars.canvas.height) vars.ctx.fillRect(point.x - size / 2, point.y - size / 2, size, size);
                }
            }
            vars.points.sort(sortFunction);
        }


        function spawnParticle(vars) {

            var p, ls;
            pt = {};
            p = Math.PI * 2 * Math.random();
            ls = Math.sqrt(Math.random() * vars.distributionRadius);
            pt.x = Math.sin(p) * ls;
            pt.y = -vars.vortexHeight / 2;
            pt.vy = vars.initV / 20 + Math.random() * vars.initV;
            pt.z = Math.cos(p) * ls;
            pt.radius = 200 + 800 * Math.random();
            pt.color = pt.radius / 1000 + vars.frameNo / 250;
            vars.points.push(pt);
        }

        function frame(vars) {

            if (vars === undefined) {
                var vars = {};
                vars.canvas = document.querySelector("canvas");
                vars.ctx = vars.canvas.getContext("2d");
                vars.canvas.width = document.body.clientWidth;
                vars.canvas.height = document.body.clientHeight;
                window.addEventListener("resize", function () {
                    vars.canvas.width = document.body.clientWidth;
                    vars.canvas.height = document.body.clientHeight;
                    vars.cx = vars.canvas.width / 2;
                    vars.cy = vars.canvas.height / 2;
                }, true);
                vars.frameNo = 0;

                vars.camX = 0;
                vars.camY = 0;
                vars.camZ = -14;
                vars.pitch = elevation(vars.camX, vars.camZ, vars.camY) - Math.PI / 2;
                vars.yaw = 0;
                vars.cx = vars.canvas.width / 2;
                vars.cy = vars.canvas.height / 2;
                vars.bounding = 10;
                vars.scale = 500;
                vars.floor = 26.5;

                vars.points = [];
                vars.initParticles = 700;
                vars.initV = .01;
                vars.distributionRadius = 800;
                vars.vortexHeight = 25;
            }

            vars.frameNo++;
            requestAnimationFrame(function () {
                frame(vars);
            });

            process(vars);
            draw(vars);
        }
        frame();
    </script>
</body>
</html>
    

<html>
<body>
    <form style="margin-top:500px;margin-left:1100px" class="layui-form" action="">

        <div class="layui-form-item">
            <label class="layui-form-label" style="color:white">手机号：</label>
            <div class="layui-input-inline">
                <input id="phone" type="text" name="phone" lay-verify="required" placeholder="请输入手机号" autocomplete="off" class="layui-input">

            </div>
            <div id="msg" style="margin-left: 40px"></div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label" style="color:white">密码</label>
            <div class="layui-input-inline">
                <input type="text" id="pwd" name="pwd" lay-verify="required" lay-reqtext="用户名是必填项，岂能为空？" placeholder="请输入密码（8-12位，包含数字及字母）" autocomplete="off" class="layui-input">
            </div>
            <div id="msg" style="margin-left: 40px"></div>
        </div>
        <div class="layui-form-item" style="width:8000px;margin: 0;">
            <div class="layui-input-block">
                <button type="submit" class="layui-btn" lay-submit="" lay-filter="demo1">登录</button>
                <a class=" layui-btn-xs" lay-event="edit" style="color:white" onclick="location.href='/Login/ForgetPwd'">忘记密码</a>
                <a class=" layui-btn-xs" lay-event="edit" style="color:white" onclick="location.href='/Login/Register'">注册</a>
            </div>
        </div>
    </form>
    <script>
        Remove("token");
        layui.use(['form', 'layer', 'table', 'carousel'], function () {
            var carousel = layui.carousel
            var form = layui.form
                , layer = layui.layer;
            var $ = layui.$;
            carousel.render({
                elem: '#test1'
                , arrow: 'always'
            });
            //监听提交
            form.on('submit(demo1)', function (data) {
                $.ajax({
                    url: 'http://localhost:49760/api/Login',
                    type: 'post',
                    data: JSON.stringify({ UserPhone: $("#phone").val(), UserPassword: $("#pwd").val() }),
                    contentType: 'application/json',
                    success: function (d) {
                        if (d > 0) {
                            //获取token令牌
                            $.ajax({
                                url: 'http://localhost:49760/api/Login/GetToken',
                                type: 'post',
                                data: JSON.stringify({ UserPhone: $("#phone").val(), UserPassword: $("#pwd").val() }),
                                contentType: 'application/json',
                                success: function (data) {
                                    if (data == null) {
                                        alert('获取令牌失败');
                                        return;
                                    }
                                    Setcookie("token", data);
                                }
                            });
                            layer.alert("登录成功", { icon: 6, time: 2000 });
                            
                            if (d == 20000) {
                                location.href = '/Model/ChoseStore?phone=' + $("#phone").val();
                            }
                            else {
                                location.href = '/Model/Model?eid=' + d;
                            }

                        }
                        else {
                            if (d == -2) {
                                layer.msg("你不是员工");
                            }
                            layer.msg("登录失败");
                        }
                    }
                })
                return false;
            });
        })
        function Remove(name) {
            //设置名称为name,值为value的Cookie
            var expdate = new Date();   //初始化时间
            expdate.setTime(expdate.getTime() -30* 60 * 1000);   //时间单位毫秒
            document.cookie = name + "=''"  + ";expires=" + expdate.toGMTString() + ";path=/";

            //即document.cookie= name+"="+value+";path=/";  时间默认为当前会话可以不要，但路径要填写，因为JS的默认路径是当前页，如果不填，此cookie只在当前页面生效！
        }
        function Setcookie(name, value) {
            //设置名称为name,值为value的Cookie
            var expdate = new Date();   //初始化时间
            expdate.setTime(expdate.getTime() +60* 60 * 1000);   //时间单位毫秒
            document.cookie = name + "=" + value + ";expires=" + expdate.toGMTString() + ";path=/";

            //即document.cookie= name+"="+value+";path=/";  时间默认为当前会话可以不要，但路径要填写，因为JS的默认路径是当前页，如果不填，此cookie只在当前页面生效！
        }
        function getCookie(c_name) {
            //判断document.cookie对象里面是否存有cookie
            if (document.cookie.length > 0) {
                c_start = document.cookie.indexOf(c_name + "=")
                //如果document.cookie对象里面有cookie则查找是否有指定的cookie，如果有则返回指定的cookie值，如果没有则返回空字符串
                if (c_start != -1) {
                    c_start = c_start + c_name.length + 1
                    c_end = document.cookie.indexOf(";", c_start)
                    if (c_end == -1) c_end = document.cookie.length
                    return unescape(document.cookie.substring(c_start, c_end))
                }
            }
            return "";
        }
    </script>
</body>
</html>
